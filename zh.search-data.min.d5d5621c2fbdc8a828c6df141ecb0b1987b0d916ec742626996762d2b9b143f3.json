[{"id":0,"href":"/helps/functions/findminpsd/","title":"findMinPSD","section":"好用的函数","content":"findMinPSD  #  搜索关心频段内的最优功率谱密度。这里的最优定义为在给定积分区间内谱密度（以   \\(\\mathrm{*^2/Hz}\\)  为单位）的积分最小。\n本程序依赖于 iLPSD  说明 #    findMinPSD(data,fs) 使用默认设置搜索最优功率谱密度并绘制时频曲面。 idx = findMinPSD(data,fs,Name,Value) 根据键值对参数设置搜索最优功率谱密度，并返回对应的时域数据索引。 [pxx,f] = findMinPSD(data,fs,Name,Value) 根据键值对参数设置搜索最优功率谱密度，并返回谱密度估计值。 [idx,pxx,f] = findMinPSD(data,fs,Name,Value) 根据键值对参数设置搜索最优功率谱密度，并返回索引和谱密度估计值。  输入 #   data #  时域数据，为一维向量。\nfs #  采样率，为标量，单位为  \\(\\mathrm{Hz}\\)  。\n输出 #   idx #  最优谱密度的时域索引，包含开始位置和终止位置。当函数只有一个输出时输出该索引；或当函数有三个输出时，该索引为第一个输出。\npxx #  估计的最优功率谱密度，单位为  \\(\\mathrm{*^2/Hz}\\)  。当函数有两个输出时，谱密度为第一个输出；或当函数具有三个输出时，谱密度为第二个输出。\nf #  谱密度对应的频率点，单位为  \\(\\mathrm{Hz}\\)  。当函数有多个输出时，该频率为最后一个输出。\n参数 #   fmin #  计算功率谱密度时关心的最小频率，为标量，单位为  \\(\\mathrm{Hz}\\)  。默认值为 1e-3。\nfint #  计算最优功率谱的积分区间，包含两个数值，对应单位为  \\(\\mathrm{Hz}\\)  。默认值为 [1e-2 1e-1]。\nxi #  数据分段扫描时的重叠率，为 0～1 之间的小数，默认值为 0.8。\nmethod #  计算功率谱的算法，可选值为 'periodogram' 和 'LPSD'（同 'iLPSD'），默认值为 'periodogram'。\nJdes #  当设置功率谱算法为 'LPSD' 时该选项有效，为 LPSD 算法的期望频率点数，为标量。默认值为 500。\npfig #  是否绘制扫描功率谱的时频曲面，为逻辑变量，默认值为 true。\n"},{"id":1,"href":"/helps/functions/gennoise/","title":"genNoise","section":"好用的函数","content":"genNoise  #  产生任意谱密度的噪声。\n本程序依赖于 iLPSD  说明 #    genNoise(ASD,fs) 根据给定谱密度和采样率构造噪声数据，并绘制其功率谱密度与目标曲线对比。 x = genNoise(ASD,fs,N) 根据给定的谱密度、采样率和点数生成噪声数据。 x = genNoise(ASD,fs,N,plt) 生成给定噪声数据并手动控制是否绘图验证。  输入 #   ASD #  目标噪声谱密度的匿名函数，为函数句柄。例如 ASD = @(f) 1./sqrt(f) 为   \\(1/f\\)  噪声。\nfs #  噪声数据的采样率，为标量。\nN #  噪声数据点数，为标量，默认值为 1024。\nplt #  是否绘图以对比生成的噪声和目标谱密度，为逻辑值，默认为 false。如果该函数没有输出，则函数一定绘图进行对比。\n输出 #   x #  生成的噪声数据。\n使用示例 #  ASD = @(f) 0.07./f + 1; fs = 10; N = 1e4; x = genNoise(ASD,fs,N,true); "},{"id":2,"href":"/helps/functions/getcurrentpsd/","title":"getCurrentPSD","section":"好用的函数","content":"getCurrentPSD  #  获取当前图窗内数据的功率谱密度。\n本程序依赖于 iLPSD  说明 #   getCurrentPSD(fs) 计算当前图窗内数据的功率谱密度，并在新的图窗中绘制结果。 getCurrentPSD(fs,Name,Value) 根据键值对参数控制 iLPSD 算法以及绘图选项。\n输入 #   fs #  采样率，为标量，单位为   \\(\\mathrm{Hz}\\)  。\n参数 #   本程序将参数传递给 iLPSD，包括以下可选参数。\nJdes #  期望的频率点数，为整数，默认值为 1000。\nKdes #  期望的分段次数，为整数，默认值为 100。\nxi #  数据分段时的重叠率，为 0~1 之间的小数，默认值为 0.5。\nwindow #  窗函数，为函数句柄，默认值为 @hann。支持自定义窗函数，但应当确保所定义的窗函数仅接受一个参数，即窗函数的长度（为整数）。\nparallel #  是否使用并行计算，为逻辑变量，默认为 false。\ntype #  计算的谱类型，为字符变量，可选值有：\n ’PSD': 默认值，计算功率谱密度； 'RMS'：计算有效值（标准差）； 'Amp'：计算幅度谱。  绘图控制 #  本程序接受绘图控制的键值对，如 'LineWidth',2。更多绘图控制可以参考 Plot 帮助文档。\n"},{"id":3,"href":"/helps/functions/ilpsd/","title":"iLPSD","section":"好用的函数","content":"iLPSD  #  使用 LPSD 算法进行功率谱估计。\n说明 #    iLPSD(data,fs) 根据给定数据和采样率直接绘制功率谱密度。 h = iLPSD(data,fs) 当只有一个输出时，绘图并输出曲线句柄。 [pxx,f] = iLPSD(data,fs) 当有两个输出时，计算数据的功率谱密度，不进行绘图。 iLPSD(data,fs,Name,Value) 根据给定的键值对参数进行功率谱估计并绘图。 [amp,f] = iLPSD(data,fs,'type','Amp') 计算幅度谱。  输入 #   data #  原始数据，为向量或矩阵。当 data 为矩阵时，按各列分别进行计算。\nfs #  采样率，以   \\(\\mathrm{Hz}\\)  为单位，标量。\n输出 #   h #  当函数只有一个输出时，输出该变量，为绘制曲线句柄。\npxx/amp #  当函数有两个输出时，该变量作为第一个输出，取决于参数 ‘type’ 的设置：\n 当 ’type‘ 设置为 ’PSD‘ （默认值）时，第一位置输出为功率谱密度，单位为  \\(\\mathrm{*^2/Hz}\\)  ； 当 ’type‘ 设置为 ’RMS‘ 时，第一位置输出为有效值，单位为  \\(\\mathrm{*}\\)  ； 当 ’type‘ 设置为 ’Amp‘ 时，第一位置输出为幅值，单位为  \\(\\mathrm{*}\\)  。  f #  当函数有两个输出时，该变量为第二个输出，对应于第一个变量各点的频率，单位为  \\(\\mathrm{Hz}\\)  。\n参数 #   本函数支持使用 'Name',Value 的形式进行额外设置，可用键值对参数如下。\nJdes #  期望的频率点数，为整数，默认值为 1000。\nKdes #  期望的分段次数，为整数，默认值为 100。\nxi #  数据分段时的重叠率，为 0~1 之间的小数，默认值为 0.5。\nwindow #  窗函数，为函数句柄，默认值为 @hann。支持自定义窗函数，但应当确保所定义的窗函数仅接受一个参数，即窗函数的长度（为整数）。\nparallel #  是否使用并行计算，为逻辑变量，默认为 false。\ntype #  计算的谱类型，为字符变量，可选值有：\n ’PSD': 默认值，计算功率谱密度； 'RMS'：计算有效值（标准差）； 'Amp'：计算幅度谱。  绘图控制 #  本程序接受绘图控制的键值对，如 'LineWidth',2。更多绘图控制可以参考 Plot 帮助文档。\n使用示例 #  ASD = @(f) 0.07./f + 1; fs = 10; N = 1e4; x = genNoise(ASD,fs,N);  figure iLPSD(x,fs) hold on grid on iLPSD(x,fs,\u0026#39;Jdes\u0026#39;,3e3) iLPSD(x,fs,\u0026#39;win\u0026#39;,@hamming,\u0026#39;LineStyle\u0026#39;,\u0026#39;--\u0026#39;) xlabel(\u0026#39;Frequency (Hz)\u0026#39;) ylabel(\u0026#39;PSD\u0026#39;) 参考资料 #   Michael Tröbs, Gerhard Heinzel. Improved spectrum estimation from digitized time series on a logarithmic frequency axis. Measurement. 2005.  LPSD 功率谱估计. 某春雨的后花园.  "},{"id":4,"href":"/helps/functions/initplot/","title":"InitPlot","section":"好用的函数","content":"InitPlot  #  初始化绘图设置。\n本程序依赖于 spcolor  说明 #    InitPlot 使用默认值值初始化绘图设置。 InitPlot(LineWidth,FontSize,WindowStyle,Interperter) 根据指定值初始化绘图设置。 InitPlot('remove') 移除自定义设置，恢复 MATLAB 默认值。  输入 #   LindWidth #  绘图采用的线宽，默认值为 2。\nFontSize #  绘图采用的坐标轴字号，默认值为 20。\nWindowStyle #  绘图窗口样式，默认值为 'docked'，即将所有绘图以标签页的形式集中在一个绘图窗口。其他可选项有 'normal'（MATLAB 默认值），'modal'。\nInterpreter #  绘图标记时文字的解释器，默认值为 'latex'。其他可选项有 'tex'（MATLAB 默认值）、'none'。\n本程序将 'latex' 设置为默认解释器，在使用 xlabel 等进行文字标注时，若设计数学符号，必须使用 $ 进行标注。如 ylabel('$V_\\mathrm{fed}\\,\\mathrm{[V/\\sqrt{Hz}]}$')。  使用示例 #  使用 edit(fullfile(userpath,'startup.m')) 建立 startup 脚本，该脚本会在 MATLAB 启动时自动运行。在该脚本中写入该函数，即可自动使用该绘图设置。\n"},{"id":5,"href":"/helps/functions/spcolor/","title":"spcolor","section":"好用的函数","content":"spcolor  #  设置绘图颜色。\n说明 #    spcolor 输出当前配色方案的颜色名字及其归一化 RGB 值。 cVec = spcolor(num) 根据数字索引输出对应颜色的 RGB 值。 cVec = spcolor(str) 根据名称索引输出对应颜色的 RGB 值。 spcolor('ShowColors') 绘图展示当前配色方案。 spcolor(hfig) 将配色方案应用到指定的绘图中。  输入 #   本程序仅支持单一输入，且在不同的输入条件下会有不同的效果，以便用于不同的场景。\n当不给定输入时，程序仅在命令行输出当前的配色方案列表，包括颜色的名称及其归一化 RGB 值。\nnum #  数字索引，为整数或整数向量。在这种输入下，函数将输出对应索引下的颜色值。特别地，当输入为 -1 时，将输出当前配色方案下的所有颜色 RGB 值。\nstr #  名称索引，为字符串或字符串数组。在这种输入下，函数将输出指定名称的颜色值。特别地，当输入字符串为 ’ShowColors‘ （不区分大小写，或简化为 ’show‘）时，程序将绘图并展示当前的配色方案。\nhfig #  figure 或 axes 句柄，在这种输入下，可以将配色方案应用在当前图窗或坐标轴下的所有曲线。\n使用示例 #  N = 5; x = linspace(0,2*pi,200)\u0026#39;; y = sin(x+(0:N-1)/(N-1)*pi);  % 仅把配色方案应用到指定坐标轴内的曲线 figure ax1 = subplot(2,1,1); plot(x,y,\u0026#39;k\u0026#39;) ax2 = subplot(2,1,2); plot(x,y,\u0026#39;k\u0026#39;) spcolor(ax1)  % 把配色方案应用到图窗内所有曲线 figure ax1 = subplot(2,1,1); plot(x,y,\u0026#39;k\u0026#39;) ax2 = subplot(2,1,2); plot(x,y,\u0026#39;k\u0026#39;) spcolor(gcf) "},{"id":6,"href":"/helps/functions/xplace/","title":"xplace","section":"好用的函数","content":"xplace  #  使用符号计算实现离散闭环系统的极点配置。\n说明 #    Para = xplace(A,p1,p2,T) 根据闭环系统的状态矩阵进行极点配置，并返回设计参数。 [Para,Aout] = xplace(A,p1,p2,T,Name,Value) 根据键值对参数设置进行极点配置，并返回设计参数和状态矩阵。  输入 #   A #  闭环系统的状态矩阵，为符号变量矩阵。待设计的参数定义为符号变量。\np1/p2 #  极点设计参数，受参数 'method' 控制，默认为闭环系统最大、最小极点相应的以   \\(\\mathrm{Hz}\\)  为单位的频率。\nT #  采样时间，单位为  \\(\\mathrm{s}\\)  。\n输出 #   Para #  参数设计值，为结构体。\nAout #  设计之后的状态矩阵，默认为数值矩阵。可通过参数 'tunable' 将其设置为可调矩阵（genmat 变量）。\n参数 #   method #  参数设计采用的方法，可选值为：\n 'lambda'：基于特征值  \\(\\lambda\\)  进行参数设计，此时输入 p1 和 p2 为特征值对应的频率； 'gamma'：基于补特征值  \\(\\gamma = 1-\\lambda\\)  进行参数设计，此时 p1 为基准频率（单位为  \\(\\mathrm{Hz}\\)  ），p2 为指数。采用 EMC 极点配置策略。  tunable #  当输出设计结果 Aout 时，该选项用于控制其是否为可调矩阵，为逻辑值，默认为 false。\noverwrite #  是否将设计结果直接输出到工作空间，默认值为 false。\n当该选项设置为 true 时，运行该函数会将设计参数输出到工作空间。若工作空间存在同名变量，将会被此函数覆盖。  "}]