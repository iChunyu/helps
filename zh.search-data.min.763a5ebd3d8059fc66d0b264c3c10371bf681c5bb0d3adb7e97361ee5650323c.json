[{"id":0,"href":"/helps/functions/autocalixy/","title":"autoCaliXY","section":"常用函数","content":" autoCaliXY # 求取阶梯信号平坦段内的平均值，并根据给定的函数模型进行拟合。\n说明 # autoCaliXY(x,y) 使用默认设置对阶梯形式的数据进行线性拟合。 [xm,ym] = autoCaliXY(x,y) 使用默认设置对阶梯形式的数据进行线性拟合，并返回阶梯平坦段内的平均值。 [xm,ym,xd,yd] = autoCaliXY(x,y,Name,Value) 根据键值对参数对阶梯信号进行拟合，返回平坦段内数据的平均值和标准差。 输入 # x, y # 输入数据，两者的函数关系名义上为： \\(y = f(x)\\) 。\n使用该函数之前请确保两个输入数据具有相同的采样率和长度，并且台阶对齐（可使用内置 alignsignals 函数）。 输出 # xm, ym # 自变量和函数值在台阶平坦段内的平均值。\nxd, yd # 自变量和函数值在台阶平坦段内的标准差。\n参数 # sample # 样本索引的标记，为两个元素的 cell 数组，第一个元素可以设置为采样时间，第二个元素为绘图时的标记。默认为 {1, 'Sample'}。\nxname, yname # x 和 y 数据的名称，分别默认为 'x'、'y'。\nStairFrom # 默认为 'x'，表示从输入的 x 数据判断阶梯的边缘，可以根据数据情况将其设置为 'y'。\nIndexRange # 输入数据的有效索引范围，默认为 [0 inf]。只有在该区间内的数据才会进行阶梯判断和平均、拟合。\nFlatRange # 设置用于计算平坦段均值的数据范围，支持向量或 cell 数组：\n若 FlatRange 内的元素小于 1，则表示相对台阶起、止边缘的百分比； 若 FlatRange 内的元素大于 1，则表示相对台阶起、止边缘的数据点数。 若 FlatRange 为标量，则将其扩充为相同元素的 \\(1 \\times 2\\) 数组； 若 FlatRange 为数组（或标量扩充的数组），两个元素分别表示用于计算平均值的数据在平坦段起、止位置； 若 FlatRange 为 cell 数组，两个元素分别表示用于计算平均值的数据的起始位置和长度。 FlatVariation # 平坦段数据长度的最大变动比，默认为 0.1。\n根据台阶信号的差分对边缘进行检测时，数据噪声的存在可能导致边缘重复计算。利用该参数可以约束台阶宽度的变动比，从而剔除出误判的重复边缘。\nPeakStd # 台阶边缘由数据差分后绝对值异常点进行判定，当异常点的数值大于 PeakStd 倍后，认为此处为台阶边缘。该参数默认值为 3。\nDrop # 指定台阶索引，在拟合前抛弃该段数据，此参数默认为 []。\nFitType # 拟合目标函数类型，默认为 'poly1'，即线性拟合。相关说明可以参考内置函数 fit 和 fittype。\nErrorBar # 展示拟合结果时是否根据平坦段数据的标准差绘制误差棒，默认为 'none'，其他可选项有：'x'、'y'、'xy'。\nCapSize # 误差棒的长度，默认为 10。\nMarker # 数据标记，当不添加误差棒时，默认为 'o' 绘制圆圈；当指定任意形式误差棒时，默认为 'none'。\nMarkerSize # 数据标记的大小，默认为 10。\n"},{"id":1,"href":"/helps/functions/findminpsd/","title":"findMinPSD","section":"常用函数","content":" findMinPSD # 搜索关心频段内的最优功率谱密度。这里的最优定义为在给定积分区间内谱密度（以 \\(\\mathrm{*^2/Hz}\\) 为单位）的积分最小。\n本程序依赖于 iLPSD 说明 # findMinPSD(data,fs) 使用默认设置搜索最优功率谱密度并绘制时频曲面。 idx = findMinPSD(data,fs,Name,Value) 根据键值对参数设置搜索最优功率谱密度，并返回对应的时域数据索引。 [pxx,f] = findMinPSD(data,fs,Name,Value) 根据键值对参数设置搜索最优功率谱密度，并返回谱密度估计值。 [idx,pxx,f] = findMinPSD(data,fs,Name,Value) 根据键值对参数设置搜索最优功率谱密度，并返回索引和谱密度估计值。 输入 # data # 时域数据，为一维向量。\nfs # 采样率，为标量，单位为 \\(\\mathrm{Hz}\\) 。\n输出 # idx # 最优谱密度的时域索引，包含开始位置和终止位置。当函数只有一个输出时输出该索引；或当函数有三个输出时，该索引为第一个输出。\npxx # 估计的最优功率谱密度，单位为 \\(\\mathrm{*^2/Hz}\\) 。当函数有两个输出时，谱密度为第一个输出；或当函数具有三个输出时，谱密度为第二个输出。\nf # 谱密度对应的频率点，单位为 \\(\\mathrm{Hz}\\) 。当函数有多个输出时，该频率为最后一个输出。\n参数 # fmin # 计算功率谱密度时关心的最小频率，为标量，单位为 \\(\\mathrm{Hz}\\) 。默认值为 1e-3。\nfint # 计算最优功率谱的积分区间，包含两个数值，对应单位为 \\(\\mathrm{Hz}\\) 。默认值为 [1e-2 1e-1]。\nxi # 数据分段扫描时的重叠率，为 0～1 之间的小数，默认值为 0.8。\nmethod # 计算功率谱的算法，可选值为 'periodogram' 和 'LPSD'（同 'iLPSD'），默认值为 'periodogram'。\nJdes # 当设置功率谱算法为 'LPSD' 时该选项有效，为 LPSD 算法的期望频率点数，为标量。默认值为 500。\npfig # 是否绘制扫描功率谱的时频曲面，为逻辑变量，默认值为 true。\ncostfcn # 自定义代价函数，为函数句柄。当不指定该参数时，默认使用给定频带内积分最小作为最优功率谱的判断依据，即：\ncostfcn = @(pxx,f) trapz(f(f\u0026gt;=fint(1)\u0026amp;f\u0026lt;=fint(2)),pxx(f\u0026gt;=fint(1)\u0026amp;f\u0026lt;=fint(2))); figtype # 输出图片的形式，可选项有 'TimeFrequency'（绘制时频响应热图）、'PSD'（绘制最优功率谱密度曲线，默认）、'Both'（时频响应和最优功率谱密度都画）。\n"},{"id":2,"href":"/helps/functions/gennoise/","title":"genNoise","section":"常用函数","content":" genNoise # 产生任意谱密度的噪声。\n本程序依赖于 iLPSD 说明 # genNoise(ASD,fs) 根据给定谱密度和采样率构造噪声数据，并绘制其功率谱密度与目标曲线对比。 x = genNoise(ASD,fs,N) 根据给定的谱密度、采样率和点数生成噪声数据。 x = genNoise(ASD,fs,N,seed,plt) 生成给定噪声数据并手动控制是否绘图验证。 输入 # ASD # 目标噪声谱密度的匿名函数，为函数句柄。例如 ASD = @(f) 1./sqrt(f) 为 \\(1/f\\) 噪声。\nfs # 噪声数据的采样率，为标量。\nN # 噪声数据点数，为标量，默认值为 1024。\nseed # 产生噪声所用的随机数种子，为整数，默认为 0。\nplt # 是否绘图以对比生成的噪声和目标谱密度，为逻辑值，默认为 false。如果该函数没有输出，则函数一定绘图进行对比。\n输出 # x # 生成的噪声数据。\n使用示例 # ASD = @(f) 0.07./f + 1; fs = 10; N = 1e4; x = genNoise(ASD,fs,N,true); "},{"id":3,"href":"/helps/functions/getcurrentpsd/","title":"getCurrentPSD","section":"常用函数","content":" getCurrentPSD # 获取当前图窗内数据的功率谱密度。\n本程序依赖于 iLPSD 说明 # getCurrentPSD(fs) 计算当前图窗内数据的功率谱密度，并在新的图窗中绘制结果。 getCurrentPSD(fs,Name,Value) 根据键值对参数控制 iLPSD 算法以及绘图选项。\n输入 # fs # 采样率，为标量，单位为 \\(\\mathrm{Hz}\\) 。\n参数 # 本程序将参数传递给 iLPSD，包括以下可选参数。\nJdes # 期望的频率点数，为整数，默认值为 1000。\nKdes # 期望的分段次数，为整数，默认值为 100。\nxi # 数据分段时的重叠率，为 0~1 之间的小数，默认值为 0.5。\nwindow # 窗函数，为函数句柄，默认值为 @hann。支持自定义窗函数，但应当确保所定义的窗函数仅接受一个参数，即窗函数的长度（为整数）。\nparallel # 是否使用并行计算，为逻辑变量，默认为 false。\ntype # 计算的谱类型，为字符变量，可选值有：\n’PSD': 默认值，计算功率谱密度； 'RMS'：计算有效值（标准差）； 'Amp'：计算幅度谱。 绘图控制 # 本程序接受绘图控制的键值对，如 'LineWidth',2。更多绘图控制可以参考 Plot 帮助文档。\n"},{"id":4,"href":"/helps/functions/getstairs/","title":"getStairs","section":"常用函数","content":" getStairs # 求取阶梯信号平坦段内的平均值。\n说明 # [ym,yd] = getStairs(y) 搜寻台阶信号的平坦段返回平坦段数据的平均值和标准差。 ym = getStairs(y,'x',x) 求取台阶信号平坦段数据的平均值，并根据给定的自变量进行线性拟合。 输入 # y # 阶梯信号。\n输出 # ym # 阶梯信号平坦段内数据的平均值。\nyd # 阶梯信号平坦段内数据的标准差。\n参数 # x # 与给定台阶信号相关的调制指令，与输出信号的标称关系为 \\(y = f(x)\\) 。\n该参数的长度应当与 'Drop' 之后的台阶数量一致，否则将忽略该输入且不自动进行拟合。\nsample # 样本索引的标记，为两个元素的 cell 数组，第一个元素可以设置为采样时间，第二个元素为绘图时的标记。默认为 {1, 'Sample'}。\nxname, yname # x 和 y 数据的名称，分别默认为 'x'、'y'。\nIndexRange # 输入数据的有效索引范围，默认为 [0 inf]。只有在该区间内的数据才会进行阶梯判断和平均、拟合。\nFlatRange # 设置用于计算平坦段均值的数据范围，支持向量或 cell 数组：\n若 FlatRange 内的元素小于 1，则表示相对台阶起、止边缘的百分比； 若 FlatRange 内的元素大于 1，则表示相对台阶起、止边缘的数据点数。 若 FlatRange 为标量，则将其扩充为相同元素的 \\(1 \\times 2\\) 数组； 若 FlatRange 为数组（或标量扩充的数组），两个元素分别表示用于计算平均值的数据在平坦段起、止位置； 若 FlatRange 为 cell 数组，两个元素分别表示用于计算平均值的数据的起始位置和长度。 FlatVariation # 平坦段数据长度的最大变动比，默认为 0.1。\n根据台阶信号的差分对边缘进行检测时，数据噪声的存在可能导致边缘重复计算。利用该参数可以约束台阶宽度的变动比，从而剔除出误判的重复边缘。\nPeakStd # 台阶边缘由数据差分后绝对值异常点进行判定，当异常点的数值大于 PeakStd 倍后，认为此处为台阶边缘。该参数默认值为 3。\nDrop # 指定台阶索引，在拟合前抛弃该段数据，此参数默认为 []。\nFitType # 拟合目标函数类型，默认为 'poly1'，即线性拟合。相关说明可以参考内置函数 fit 和 fittype。\nErrorBar # 展示拟合结果时是否根据平坦段数据的标准差绘制误差棒，默认为 'off'；如果需要显示误差棒，可将该参数设置为 'on'。\nCapSize # 误差棒的长度，默认为 10。\nMarker # 数据标记，当不添加误差棒时，默认为 'o' 绘制圆圈；当指定任意形式误差棒时，默认为 'none'。\nMarkerSize # 数据标记的大小，默认为 10。\n"},{"id":5,"href":"/helps/functions/ilpsd/","title":"iLPSD","section":"常用函数","content":" iLPSD # 使用 LPSD 算法进行功率谱估计。\n说明 # iLPSD(data,fs) 根据给定数据和采样率直接绘制功率谱密度。 h = iLPSD(data,fs) 当只有一个输出时，绘图并输出曲线句柄。 [pxx,f] = iLPSD(data,fs) 当有两个输出时，计算数据的功率谱密度，不进行绘图。 iLPSD(data,fs,Name,Value) 根据给定的键值对参数进行功率谱估计并绘图。 [amp,f] = iLPSD(data,fs,'type','Amp') 计算幅度谱。 输入 # data # 原始数据，为向量或矩阵。当 data 为矩阵时，按各列分别进行计算。\nfs # 采样率，以 \\(\\mathrm{Hz}\\) 为单位，标量。\n输出 # h # 当函数只有一个输出时，输出该变量，为绘制曲线句柄。\npxx/amp # 当函数有两个输出时，该变量作为第一个输出，取决于参数 ‘type’ 的设置：\n当 ’type‘ 设置为 ’PSD‘ （默认值）时，第一位置输出为功率谱密度，单位为 \\(\\mathrm{*^2/Hz}\\) ； 当 ’type‘ 设置为 ’RMS‘ 时，第一位置输出为有效值，单位为 \\(\\mathrm{*}\\) ； 当 ’type‘ 设置为 ’Amp‘ 时，第一位置输出为幅值，单位为 \\(\\mathrm{*}\\) 。 f # 当函数有两个输出时，该变量为第二个输出，对应于第一个变量各点的频率，单位为 \\(\\mathrm{Hz}\\) 。\n参数 # 本函数支持使用 'Name',Value 的形式进行额外设置，可用键值对参数如下。\nJdes # 期望的频率点数，为整数，默认值为 1000。\nKdes # 期望的分段次数，为整数，默认值为 100。\nxi # 数据分段时的重叠率，为 0~1 之间的小数，默认值为 0.5。\nwindow # 窗函数，为函数句柄，默认值为 @hann。支持自定义窗函数，但应当确保所定义的窗函数仅接受一个参数，即窗函数的长度（为整数）。\nparallel # 是否使用并行计算，为逻辑变量，默认为 false。\ntype # 计算的谱类型，为字符变量，可选值有：\n’PSD': 默认值，计算功率谱密度； 'RMS'：计算有效值（标准差）； 'Amp'：计算幅度谱。 绘图控制 # 本程序接受绘图控制的键值对，如 'LineWidth',2。更多绘图控制可以参考 Plot 帮助文档。\n使用示例 # ASD = @(f) 0.07./f + 1; fs = 10; N = 1e4; x = genNoise(ASD,fs,N); figure iLPSD(x,fs) hold on grid on iLPSD(x,fs,\u0026#39;Jdes\u0026#39;,3e3) iLPSD(x,fs,\u0026#39;win\u0026#39;,@hamming,\u0026#39;LineStyle\u0026#39;,\u0026#39;--\u0026#39;) xlabel(\u0026#39;Frequency (Hz)\u0026#39;) ylabel(\u0026#39;PSD\u0026#39;) 参考资料 # Michael Tröbs, Gerhard Heinzel. Improved spectrum estimation from digitized time series on a logarithmic frequency axis. Measurement. 2005. LPSD 功率谱估计. 某春雨的后花园. "},{"id":6,"href":"/helps/functions/initplot/","title":"InitPlot","section":"常用函数","content":" InitPlot # 初始化绘图设置。\n本程序依赖于 spcolor 说明 # InitPlot 使用默认值值初始化绘图设置。 InitPlot(LineWidth,FontSize,WindowStyle,Interperter,Style) 根据指定值初始化绘图设置。 InitPlot('remove') 移除自定义设置，恢复 MATLAB 默认值。 输入 # LindWidth # 绘图采用的线宽，默认值为 2。\nFontSize # 绘图采用的坐标轴字号，默认值为 20。\nWindowStyle # 绘图窗口样式，默认值为 'docked'，即将所有绘图以标签页的形式集中在一个绘图窗口。其他可选项有 'normal'（MATLAB 默认值），'modal'。\nInterpreter # 绘图标记时文字的解释器，默认值为 'latex'。其他可选项有 'tex'（MATLAB 默认值）、'none'。\n本程序将 'latex' 设置为默认解释器，在使用 xlabel 等进行文字标注时，若设计数学符号，必须使用 $ 进行标注。如 ylabel('$V_\\mathrm{fed}\\,\\mathrm{[V/\\sqrt{Hz}]}$')。 Style # 配色样式，默认为 hybrid，其他可选项有：matplotlib、seaborn、seaborn2。各个配色方案可以通过命令如 spcolor('ShowColors','hybrid') 进行查看。\n使用示例 # 使用 edit(fullfile(userpath,'startup.m')) 建立 startup 脚本，该脚本会在 MATLAB 启动时自动运行。在该脚本中写入该函数，即可自动使用该绘图设置。\n"},{"id":7,"href":"/helps/functions/spcolor/","title":"spcolor","section":"常用函数","content":" spcolor # 设置绘图颜色。\n说明 # spcolor 输出当前配色方案的颜色名字及其归一化 RGB 值。 cVec = spcolor(num) 根据数字索引输出对应颜色的 RGB 值。 cVec = spcolor(str) 根据名称索引输出对应颜色的 RGB 值。 spcolor('ShowColors') 绘图展示所有配色方案。 spcolor(hfig) 将配色方案应用到指定的绘图中。 spcolor(_,style) 指定配色方案。 输入 # 本程序仅支持单一输入，且在不同的输入条件下会有不同的效果，以便用于不同的场景。\n当不给定输入时，程序仅在命令行输出当前的配色方案列表，包括颜色的名称及其归一化 RGB 值。\nnum # 数字索引，为整数或整数向量。在这种输入下，函数将输出对应索引下的颜色值。特别地，当输入为 -1 时，将输出当前配色方案下的所有颜色 RGB 值。\nstr # 名称索引，为字符串或字符串数组。在这种输入下，函数将输出指定名称的颜色值。特别地，当输入字符串为 ’ShowColors‘ （不区分大小写，或简化为 ’show‘）时，程序将绘图并展示当前的配色方案。\nhfig # figure 或 axes 句柄，在这种输入下，可以将配色方案应用在当前图窗或坐标轴下的所有曲线。\nstyle # 配色样式，默认为 hybrid，其他可选项有：matplotlib、seaborn、seaborn2。各个配色方案可以通过命令如 spcolor('ShowColors') 进行查看。\n使用示例 # N = 5; x = linspace(0,2*pi,200)\u0026#39;; y = sin(x+(0:N-1)/(N-1)*pi); % 仅把配色方案应用到指定坐标轴内的曲线 figure ax1 = subplot(2,1,1); plot(x,y,\u0026#39;k\u0026#39;) ax2 = subplot(2,1,2); plot(x,y,\u0026#39;k\u0026#39;) spcolor(ax1) % 把配色方案应用到图窗内所有曲线 figure ax1 = subplot(2,1,1); plot(x,y,\u0026#39;k\u0026#39;) ax2 = subplot(2,1,2); plot(x,y,\u0026#39;k\u0026#39;) spcolor(gcf) "},{"id":8,"href":"/helps/functions/trackdiff/","title":"trackdiff","section":"常用函数","content":" trackdiff # 使用跟踪微分器对信号进行微分和滤波。\n说明 # du = trackdiff(ui,fs,fc) 给定采样率和滤波带宽对信号进行微分。 du = trackdiff(ui,fs,fc,N) 给定采样率、滤波带宽和滤波因数，对信号进行微分。 [du,uo] = trackdiff(ui,fs,fc,N) 对信号进行微分和滤波。 输入 # ui # 输入信号，为向量或矩阵。当其为矩阵时，对每一列进行跟踪微分。\nfs # 采样率，标量，单位为 \\(\\mathrm{Hz}\\) 。\nfc # 滤波截止频率，标量，单位为 \\(\\mathrm{Hz}\\) 。\nN # 滤波因数，为正整数。其值越大，滤波带宽相应减小。\n输出 # du # 输入信号的微分信号，当输入为矩阵时，按列对应。\nuo # 输入信号的滤波信号，当输入为矩阵时，按列对应。\n参考资料 # 韩京清, 自抗扰控制技术: 估计补偿不确定因素的控制技术, 国防工业出版社, 2008. "},{"id":9,"href":"/helps/functions/xbode/","title":"xbode","section":"常用函数","content":" xbode # 绘制系统的 Bode 图，可指定为幅频响应或相频响应。\n说明 # xbode(sys) 使用默认设置绘制系统的幅频响应。 xbode(sys,f,'Type','Magnitude') 指定频率绘制系统的相频响应。 [mag,f] = xbode(sys,f,'ShowBode',true) 计算幅频响应并输出，并将结果绘图。 [mag,phase,f] = xbode(sys,_) 计算系统的频率响应并输出，可使用参数进行设置。 输入 # sys # 待分析的系统，可以使用传递函数、状态空间、传递函数矩阵等；支持连续时间系统和离散时间系统。\n如果指定了系统输入、输出名称（例如使用 getIOTransfer 获得的状态方程会自带 InputName 和 OutputName 属性），在构造向量、矩阵时应当遵守 MIMO 系统的规则以避免出现警告。例如单输入多输出应当构造为列向量、多输入单输出应当构造为行向量。 f # 可选参数，用于控制 Bode 图的频率范围，默认单位为 \\(\\mathrm{Hz}\\) ，允许以下情形：\n留空：此时将由 bode 函数控制频率范围和计算的频率点数量； 标量：当系统为离散系统时允许传入标量，此时对应绘图频率下限频率的对数，即 \\(\\log_{10} f_\\mathrm{min}\\) 。如此做，频率上限默认为 Nyquist 频率 \\(f_\\mathrm{max} = f_s/2\\) ，频率点数为 \\(100\\) ； 长度为 \\(2\\) 的向量：分别对应最小、最大频率的对数，即 \\([\\,\\log_{10}f_\\mathrm{min},\\, \\log_{10}f_\\mathrm{max}\\,]\\) ，默认频率点数为 \\(100\\) 。对于离散系统，程序会判断设置的最大频率并将其约束在 Nyquist 频率以内； 长度大于 \\(2\\) 的向量：手动指定计算的频率点。对于离散系统，程序会判断设置的最大频率并将其约束在 Nyquist 频率以内。 输出 # mag # 幅度响应，根据传入系统的尺寸不同，将有以下两种输出：\n输入为系统向量：输出为矩阵，各列对应各子系统的频率响应； 输入为系统矩阵：输出为三维数组，前两个维度与输入矩阵对应（行列分别对应输出、输入），第三个维度为频率响应。 phase # 相位响应，输出形式同幅度响应规则。\nf # 幅频响应和相频响应对应的频率点。\n参数 # ShowBode # 是否绘制 Bode 图，为逻辑值。当函数没有输出时默认为 true，否则默认为 false。\nType # Bode 绘图选择，可选值为 'Magnitude' 或 'Phase'，分别对应绘制幅频响应和相频响应。默认值为 'Magnitude' 。\nTreatAs # 绘图选项，可选值为 'SISO' 或 'MIMO'。当输入系统向量时，'SISO' 将所有的频率响应绘制在一个坐标系以便对比，'MIMO' 将各系统的响应绘制在多个坐标系中，子图的形状与系统向量的形状一致。该选项默认值为 'SISO'，但当输入系统矩阵时，将强制为 'MIMO'。\n绘图控制 # 本程序支持使用键值对进行绘图控制，如 'LineWidth',2。应当注意的是：当传入系统向量或矩阵时，该选项会对所有绘图生效。因此建议只在绘制单个系统的响应时使用该功能。\n使用示例 # sys1 = tf(2*pi,[1 2*pi]); sys2 = tf(20*pi,[1 20*pi]); f = [-2 3]; figure xbode(sys1,f) hold on xbode(sys2,f,\u0026#39;LineStyle\u0026#39;,\u0026#39;--\u0026#39;) figure xbode([sys1;sys2],f,\u0026#39;TreatAs\u0026#39;,\u0026#39;MIMO\u0026#39;) "},{"id":10,"href":"/helps/functions/xplace/","title":"xplace","section":"常用函数","content":" xplace # 使用符号计算实现离散闭环系统的极点配置。\n说明 # Para = xplace(A,p,T) 根据闭环系统的状态矩阵进行极点配置，并返回设计参数。 [Para,Aout] = xplace(A,p,T,Name,Value) 根据键值对参数设置进行极点配置，并返回设计参数和状态矩阵。 输入 # A # 闭环系统的状态矩阵，为符号变量矩阵。待设计的参数定义为符号变量。\np # 极点设计参数，受参数 'method' 控制，默认为闭环系统以 \\(\\mathrm{Hz}\\) 为单位的极点：\n当 p 长度为 1 时：参数设计的所有目标极点都为指定极点； 当 p 长度为 2 时：参数设计的目标极点在 p(1) 和 p(2) 之间对数插值； 当 p 长度与 A 维度相同时：手动指定所有目标极点。 T # 采样时间，单位为 \\(\\mathrm{s}\\) 。\n输出 # Para # 参数设计值，为结构体。\nAout # 设计之后的状态矩阵，默认为数值矩阵。可通过参数 'tunable' 将其设置为可调矩阵（genmat 变量）。\n参数 # method # 参数设计采用的方法，可选值为：\n'lambda'：基于特征值 \\(\\lambda\\) 进行参数设计，此时输入 p1 和 p2 为特征值对应的频率； 'gamma'：基于补特征值 \\(\\gamma = 1-\\lambda\\) 进行参数设计，此时 p1 为基准频率（单位为 \\(\\mathrm{Hz}\\) ），p2 为指数。采用 EMC 极点配置策略。 tunable # 当输出设计结果 Aout 时，该选项用于控制其是否为可调矩阵，为逻辑值，默认为 false。\nexport # 是否将设计结果直接输出到工作空间，默认值为 false。\n当该选项设置为 true 时，运行该函数会将设计参数输出到工作空间。若工作空间存在同名变量，将会被此函数覆盖。 "},{"id":11,"href":"/helps/systems/spacecraftdynamics/","title":"航天器动力学","section":"系统模型","content":" 航天器动力学 # 航天器轨道动力学和姿态动力学模型。 输入 # \\(\\mathbf{g}_s^i\\) ：航天器受到的引力加速度； \\(\\mathbf{F}_{s,\\mathrm{ng}}^s\\) ：航天器受到的的非保守力； \\(\\mathbf{M}_s^s\\) ：航天器受到的力矩。 输出 # \\(\\mathbf{r}_{is}^i\\) ：航天器在惯性系下的位置； \\(\\mathbf{v}_{is}^i\\) ：航天器在惯性系下的速度； \\(\\mathbf{a}_{s,\\mathrm{ng}}^s\\) ：非保守力引起的加速度； \\(\\mathfrak{q}_s^i\\) ：航天器的姿态四元数； \\(\\bm{\\omega}_{is}^s\\) ：航天器角速度； \\(\\dot{\\bm{\\omega}}_{is}^s\\) ：航天器角加速度。 说明：姿态四元数采用 \\(\\mathfrak{q} = [q_0,\\, q_1,\\, q_2,\\, q_3]\\) 形式。\n参数 # Ms：航天器的质量； Js：航天器的转动惯量矩阵； r0_is_i：航天器的初始位置； v0_is_i：航天器的初始速度； omg0_is_s：航天器的初始角速度； q0_s_i：航天器的初始姿态四元数。 "}]